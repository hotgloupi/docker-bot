# vim: set filetype=python expandtab
from __future__ import absolute_import
from __future__ import print_function

from buildbot.changes.gitpoller import GitPoller
from buildbot.changes import filter
from buildbot.config import BuilderConfig
from buildbot.plugins import buildslave
from buildbot.process.factory import BuildFactory
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.timed import Nightly
from buildbot.schedulers.triggerable import Triggerable
from buildbot.steps.source.git import Git
from buildbot.steps.transfer import FileDownload
from buildbot.steps.shell import ShellCommand

from collections import namedtuple
import json
import os
import docker
import io
from dockerslave import DockerLatentBuildSlave

SLAVE_PASSWORD = 'lolthisissecure'

def byteify(input):
    if isinstance(input, dict):
        return {byteify(key):byteify(value) for key,value in input.iteritems()}
    elif isinstance(input, list):
        return [byteify(element) for element in input]
    elif isinstance(input, unicode):
        return input.encode('utf-8')
    else:
        return input

with open('config.json') as f:
    DESCRIPTION = byteify(json.load(f))
    print("DESCRTIPTION:", DESCRIPTION)

SLAVES = DESCRIPTION['slaves']

c = BuildmasterConfig = {}

def file_content(path, **kw):
    with open(path) as f:
        return f.read().format(**kw)

for name, slave in SLAVES.items():
    dockerfile = file_content(
        slave['docker-file'],
        master_hostname = '%(server-address)s:%(server-port)s' % DESCRIPTION['master'],
        slave_name = name,
        slave_password = SLAVE_PASSWORD,
    )
    client = docker.client.Client(
        base_url = slave['docker-host'],
        version = 'auto',
    )
    print("Creating image", 'dockerbot_build_' + name)
    res = client.build(
        fileobj = io.BytesIO(dockerfile.encode('utf-8')),
        tag = 'dockerbot_build_' + name,
        rm = True,
    )
    for line in res:
        line = json.loads(line.strip())
        if 'error' in  line:
            raise Exception(line['error'].strip())
        if 'stream' in line:
            print(">>>", line['stream'].strip())
        else:
            print('???', line)

    # Make sure that each slave has an env
    slave.setdefault('env', {})
    slave['env']['SLAVE_NAME'] = name
    slave.setdefault('idle-timeout', 600)


with open('/container.id') as f:
    master_id = f.read().strip()

c['slaves'] = [
    DockerLatentBuildSlave(
        name,
        SLAVE_PASSWORD,
        docker_host = slave['docker-host'],
        image = 'dockerbot_build_' + name,
        version = 'auto',
        build_wait_timeout = slave['idle-timeout'],
        volumes = slave.get('volumes'),
        create_container_args = dict(
            host_config = docker.utils.create_host_config(
                links = {
                    master_id: "MASTER",
                },
            ),
            environment = slave['env'],
        ),
    ) for name, slave in SLAVES.items()
]

c['protocols'] = {'pb': {'port': 9989}}


c['change_source'] = []
REPOSITORIES = DESCRIPTION['repositories']

for name, repository in REPOSITORIES.items():
    repository['name'] = name
    repository.setdefault('branch', 'master')
    repository.setdefault('poll-interval', 30)
    c['change_source'].append(
        GitPoller(
            repository['url'],
            workdir = 'gitpoller-%s' % name,
            branch = repository['branch'],
            project = name,
            pollinterval = repository['poll-interval'],
        )
    )

BUILDS = DESCRIPTION['builds']

for name, build in BUILDS.items():
    repository_name = build.get('repository', name)
    if repository_name not in REPOSITORIES:
        raise Exception("Repository '%s' is not present in the repositories section" % repository_name)
    build['repository'] = REPOSITORIES[repository_name]
    build['repository']['name'] = repository_name

c['schedulers'] = []
c['builders'] = []

for name, build in BUILDS.items():
    repository = build['repository']
    c['schedulers'].extend([
        SingleBranchScheduler(
            name = name,
            change_filter = filter.ChangeFilter(
                branch = repository['branch'],
                project = repository['name'],
            ),
            treeStableTimer = None,
            builderNames = [name],
        ),
        ForceScheduler(
            name = "force-%s" % name,
            builderNames = [name],
        ),
    ])
    factory = BuildFactory()
    factory.addStep(
        Git(
            repourl = repository['url'],
            branch = repository['branch'],
            mode = 'incremental',
            # method = 'fresh', # only with full mode
            submodules = False,
            alwaysUseLatest = True,
            shallow = False,
        )
    )
    env = build.get('env', {})
    env['BUILD_NAME'] = name
    for step in build['steps']:
        factory.addStep(
            FileDownload(
                mastersrc = os.path.join('/steps', step),
                slavedest = step,
                hideStepIf = True,
            )
        )
        factory.addStep(
            ShellCommand(
                name = step,
                command = ['bash', '-eaux', step],
                haltOnFailure = True,
                env = env,
            )
        )
    c['builders'].append(
        BuilderConfig(
            name = name,
            slavenames = build['slaves'],
            factory = factory
        )
    )

c['status'] = []


from buildbot.status import html
from buildbot.status.web import authz, auth

c['status'].append(
    html.WebStatus(
        #http_port = "tcp:8010:interface=127.0.0.1",
        http_port = 8010,
        authz = authz.Authz(
            # authentication handled by nginx
            #auth = auth.BasicAuth([
            #    ("bf","bfpasslol"),
            #]),
            gracefulShutdown = False,
            forceBuild = True,
            forceAllBuilds = False,
            pingBuilder = True,
            stopBuild = True,
            stopAllBuilds = False,
            cancelPendingBuild = False,
        ),
        change_hook_dialects = {'github': True},
    )
)

####### PROJECT IDENTITY

c['title'] = "8cube"
c['titleURL'] = "http://8cube.io"
c['buildbotURL'] = "http://bf.8cube.io"
c['buildbotURL'] = "http://localhost:8010/"

