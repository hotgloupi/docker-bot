# vim: set filetype=python expandtab
from __future__ import absolute_import
from __future__ import print_function

from buildbot.changes.gitpoller import GitPoller
from buildbot.changes import filter
from buildbot.config import BuilderConfig
from buildbot.plugins import buildslave
from buildbot.plugins import steps
from buildbot.plugins import util
from buildbot.process.factory import BuildFactory
from buildbot.process.properties import Property
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.basic import AnyBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.timed import Nightly
from buildbot.schedulers.triggerable import Triggerable
from buildbot.steps.shell import ShellCommand
from buildbot.steps.source.git import Git
from buildbot.steps.transfer import FileDownload, FileUpload
from buildbot.steps.master import MasterShellCommand
from buildbot.steps.trigger import Trigger

from collections import namedtuple
import docker
import io
import json
import os
import stat
from pprint import pprint

from dockerslave import DockerLatentBuildSlave

def byteify(input):
    if isinstance(input, dict):
        return {byteify(key):byteify(value) for key,value in input.iteritems()}
    elif isinstance(input, list):
        return [byteify(element) for element in input]
    elif isinstance(input, unicode):
        return input.encode('utf-8')
    else:
        return input

with open('config.json') as f:
    DESCRIPTION = byteify(json.load(f))
    pprint(DESCRIPTION)

SLAVES = DESCRIPTION['slaves']

c = BuildmasterConfig = {}

def file_content(path, **kw):
    with open(path) as f:
        return f.read().format(**kw)

with open('/container.id') as f:
    master_id = f.read().strip()

c['slaves'] = [
    DockerLatentBuildSlave(
        name,
        slave['password'],
        docker_host = slave['docker-host'],
        image = slave['image-name'],
        version = 'auto',
        build_wait_timeout = slave['idle-timeout'],
        volumes = slave.get('volumes'),
        create_container_args = dict(
            host_config = docker.utils.create_host_config(
                links = {
                    master_id: "MASTER",
                },
            ),
            environment = slave['env'],
        ),
    ) for name, slave in SLAVES.items() if not slave['external']
]

c['slaves'].extend(
    buildslave.BuildSlave(
        name,
        slave['password'],
        properties = {
            'env': slave['env'],
        }
    )
    for name, slave in SLAVES.items() if slave['external']
)


c['protocols'] = {'pb': {'port': 9989}}


c['change_source'] = []
REPOSITORIES = DESCRIPTION['repositories']


CWD = os.getcwd()

SSH_WRAPPER_DIR = os.path.join(CWD, "ssh-wrappers")

if not os.path.exists(SSH_WRAPPER_DIR):
    os.makedirs(SSH_WRAPPER_DIR)

SSH_WRAPPER_SCRIPT = os.path.join(SSH_WRAPPER_DIR, "ssh.sh")
with open(SSH_WRAPPER_SCRIPT, 'w') as f:
    f.write("#!/bin/sh\n")
    f.write('ssh -i "${GIT_PRIVATE_KEY}" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "$@"\n')
os.chmod(SSH_WRAPPER_SCRIPT, stat.S_IXUSR | stat.S_IWUSR |stat.S_IRUSR)

for name, repository in REPOSITORIES.items():
    gitbin = 'git'
    key = repository.get('key')
    if key is not None:
        os.chmod("/keys/%s" % key, stat.S_IXUSR | stat.S_IWUSR | stat.S_IRUSR)
        gitbin = os.path.join(SSH_WRAPPER_DIR, "git-%s.sh" % name)
        with open(gitbin, 'w') as f:
            f.write("#!/bin/sh\n")
            f.write("export GIT_PRIVATE_KEY=/keys/%s\n" % key)
            f.write("export GIT_SSH=%s\n" % SSH_WRAPPER_SCRIPT)
            f.write('git "$@"')
        os.chmod(gitbin, stat.S_IXUSR | stat.S_IWUSR | stat.S_IRUSR)

    c['change_source'].append(
        GitPoller(
            repository['url'],
            workdir = 'gitpoller-%s' % name,
            branches = True,
            project = name,
            pollinterval = repository['poll-interval'],
            gitbin = gitbin
        )
    )

BUILDS = DESCRIPTION['builds']

c['schedulers'] = []
c['builders'] = []

def should_clean_build_directory(step):
    try:
        return step.build.getProperties()['clean_build_directory']
    except:
        return False

for build_name, build in BUILDS.items():
    repository = build['repository']
    c['schedulers'].extend([
        SingleBranchScheduler(
            name = name,
            change_filter = filter.ChangeFilter(
                #branch = repository['branch'],
                project = repository['name'],
            ),
            treeStableTimer = None,
            builderNames = list(v['name'] for v in build['variants'].values()),
        ),
    ])

    from buildbot.status.builder import SUCCESS
    step_succedeed = lambda results, s: results == SUCCESS

    for variant in build['variants'].values():
        name = variant['name']
        c['schedulers'].append(
            ForceScheduler(
                name = "force-%s" % name,
                builderNames = [name],
                properties = [
                    util.BooleanParameter(
                        name = "clean_build_directory",
                        label = "Clean build",
                        default = False
                    ),
                    util.ChoiceStringParameter(
                        name = "force_slave",
                        label = "Slave",
                        default = 'all',
                        multiple = False,
                        strict = True,
                        choices = ['all'] + variant['slaves'],
                    ),
                ]
            ),
        )
        factory = BuildFactory()
        for slave in variant['slaves']:
            factory.addStep(Trigger(
                name = 'Build %s-%s' % (slave, name),
                schedulerNames = ['build-%s-%s' % (slave, name)],
                doStepIf = lambda step, slave = slave: \
                    step.build.getProperty('force_slave', 'all') in ('all', slave),
                copy_properties = [
                    'clean_build_directory',
                ]
            ))
        c['builders'].append(
            BuilderConfig(
                name = name,
                slavenames = variant['slaves'],
                factory = factory,
            )
        )
        factory = BuildFactory()
        env = {}
        key = repository.get('key')
        if key is not None:
            factory.addStep(
                steps.SetPropertiesFromEnv(
                    variables = ['TEMP'],
                    hideStepIf = step_succedeed,
                )
            )
            src_key = '/keys/%s' % key
            dst_key = util.Interpolate('%(prop:TEMP:~/tmp)s' + ('/%s-%s' % (name, key)))
            dst_ssh = util.Interpolate('%(prop:TEMP:~/tmp)s' + ('/%s-ssh.sh' % name))
            env.update({
                'GIT_SSH': dst_ssh,
                'GIT_PRIVATE_KEY': dst_key,
            })
            # upload key
            factory.addStep(
                FileDownload(
                    mastersrc = src_key,
                    slavedest = dst_key,
                    hideStepIf = step_succedeed,
                )
            )
            # Apply correct permissions on the key
            factory.addStep(
                ShellCommand(
                    name = 'Set ssh key permissions',
                    command = ['chmod', '0600', dst_key],
                    haltOnFailure = True,
                    env = env,
                    hideStepIf = step_succedeed,
                )
            )
            # Upload ssh wrapper
            factory.addStep(
                FileDownload(
                    mastersrc = SSH_WRAPPER_SCRIPT,
                    slavedest = dst_ssh,
                    hideStepIf = step_succedeed,
                )
            )
            # Make the wrapper executable
            factory.addStep(
                ShellCommand(
                    name = 'Make ssh wrapper executable',
                    command = ['chmod', '+x', dst_ssh],
                    haltOnFailure = True,
                    env = env,
                    hideStepIf = step_succedeed,
                )
            )
        factory.addStep(
            Git(
                repourl = repository['url'],
                branch = util.Interpolate('%(prop:branch:~' + repository['branch'] + ')s'),
                mode = 'incremental',
                # method = 'fresh', # only with full mode
                submodules = repository.get('submodules', False),
                alwaysUseLatest = True,
                shallow = False,
                env = env,
            )
        )
        factory.addStep(
            ShellCommand(
                name = 'Clean the build',
                haltOnFailure = True,
                command = ['git', 'clean', '-ffdx'],
                doStepIf = should_clean_build_directory,
            )
        )
        for artifact in variant['upload-artifacts']:
            factory.addStep(
                FileDownload(
                    mastersrc = os.path.join('/artifacts', artifact),
                    slavedest = os.path.basename(artifact),
                    name = 'Upload %s' % artifact,
                )
            )
        env = variant.get('env', {})
        env['BUILD_NAME'] = name
        env['SLAVE_NAME'] = Property('slavename')
        for step in variant['steps']:
            factory.addStep(
                FileDownload(
                    mastersrc = os.path.join('/steps', step),
                    slavedest = step,
                    hideStepIf = step_succedeed,
                )
            )
            factory.addStep(
                ShellCommand(
                    name = step,
                    description = step,
                    command = ['bash', '-eaux', step],
                    haltOnFailure = True,
                    env = env,
                )
            )
        for artifact in variant['artifacts']:
            factory.addStep(
                FileUpload(
                    name = 'Download artifact %s' % os.path.basename(artifact),
                    slavesrc = artifact,
                    masterdest = os.path.join('/artifacts', os.path.basename(artifact)),
                )
            )
            factory.addStep(
                MasterShellCommand(
                    name = 'Make %s readable' % os.path.basename(artifact),
                    command = ['chmod', 'a+r', os.path.join('/artifacts', os.path.basename(artifact))],
                    haltOnFailure = True,
                    hideStepIf = step_succedeed,
                )
            )

        for slave in variant['slaves']:
            c['schedulers'].append(
                Triggerable(
                    name = "build-%s-%s" % (slave, name),
                    builderNames = ['build-%s-%s' % (slave, name)],
                )
            )
            c['builders'].append(
                BuilderConfig(
                    name = 'build-%s-%s' % (slave, name),
                    slavenames = [slave],
                    factory = factory,
                )
            )

c['status'] = []


from buildbot.status import html
from buildbot.status.web import authz, auth

c['status'].append(
    html.WebStatus(
        #http_port = "tcp:8010:interface=127.0.0.1",
        http_port = 8010,
        authz = authz.Authz(
            # authentication handled by nginx
            #auth = auth.BasicAuth([
            #    ("bf","bfpasslol"),
            #]),
            gracefulShutdown = False,
            forceBuild = True,
            forceAllBuilds = False,
            pingBuilder = True,
            stopBuild = True,
            stopAllBuilds = False,
            cancelPendingBuild = False,
        ),
        change_hook_dialects = {'github': True},
    )
)

####### PROJECT IDENTITY

c['title'] = "8cube"
c['titleURL'] = "http://8cube.io"
c['buildbotURL'] = "http://bf.8cube.io"
c['buildbotURL'] = "http://localhost:8010/"

